{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { actionTypes } from './actions';\nconst initialState = {\n  userData: {\n    username: \"admin\",\n    password: \"12345\",\n    logged: false\n  },\n  loginError: false\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.LOGIN_SUCCESS:\n      return _objectSpread(_objectSpread(_objectSpread({}, state), state.userData), {}, {\n        logged: true\n      });\n\n    case actionTypes.LOGIN_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loginError: true\n      });\n\n    case actionTypes.LOGOUT:\n      return _objectSpread(_objectSpread(_objectSpread({}, state), state.userData), {}, {\n        logged: false\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["E:/Work/Projects/test-app/src/redux/reducer.js"],"names":["actionTypes","initialState","userData","username","password","logged","loginError","reducer","state","action","type","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,WAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE,OADF;AAERC,IAAAA,QAAQ,EAAE,OAFF;AAGRC,IAAAA,MAAM,EAAE;AAHA,GADS;AAMnBC,EAAAA,UAAU,EAAE;AANO,CAArB;;AASA,MAAMC,OAAO,GAAG,CACdC,KAAK,GAAGP,YADM,EAEdQ,MAFc,KAGX;AACH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,WAAW,CAACW,aAAjB;AACE,2DACKH,KADL,GAEKA,KAAK,CAACN,QAFX;AAGEG,QAAAA,MAAM,EAAE;AAHV;;AAKF,SAAKL,WAAW,CAACY,aAAjB;AACE,6CACKJ,KADL;AAEEF,QAAAA,UAAU,EAAE;AAFd;;AAIF,SAAKN,WAAW,CAACa,MAAjB;AACE,2DACKL,KADL,GAEKA,KAAK,CAACN,QAFX;AAGEG,QAAAA,MAAM,EAAE;AAHV;;AAKF;AACE,aAAOG,KAAP;AAnBJ;AAqBD,CAzBD;;AA2BA,eAAeD,OAAf","sourcesContent":["import { actionTypes } from './actions';\n\nconst initialState = {\n  userData: {\n    username: \"admin\",\n    password: \"12345\",\n    logged: false,\n  },\n  loginError: false,\n}\n\nconst reducer = (\n  state = initialState,\n  action\n) => {\n  switch (action.type) {\n    case actionTypes.LOGIN_SUCCESS:\n      return {\n        ...state,\n        ...state.userData,\n        logged: true,\n      }\n    case actionTypes.LOGIN_FAILURE:\n      return {\n        ...state,\n        loginError: true,\n      }\n    case actionTypes.LOGOUT:\n      return {\n        ...state,\n        ...state.userData,\n        logged: false,\n      }\n    default:\n      return state;\n  }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}